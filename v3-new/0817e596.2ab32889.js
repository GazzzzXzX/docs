(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{136:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));n(52),n(25),n(20),n(21),n(53),n(0);var a=n(288);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var r={title:"Metadata Cache"},c=[{value:"Automatic Invalidation",id:"automatic-invalidation",children:[]},{value:"Disabling Metadata Cache",id:"disabling-metadata-cache",children:[]},{value:"Pretty Printing",id:"pretty-printing",children:[]},{value:"Using Different temp Folder",id:"using-different-temp-folder",children:[]},{value:"Providing Custom Cache Adapter",id:"providing-custom-cache-adapter",children:[]}],o={rightToc:c},p="wrapper";function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(p,i({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Under the hood, ",Object(a.b)("inlineCode",{parentName:"p"},"MikroORM")," uses ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/dsherret/ts-morph"}),Object(a.b)("inlineCode",{parentName:"a"},"ts-morph"))," to read\nTypeScript source files of all entities to be able to detect all types. Thanks to this,\ndefining the type is enough for runtime validation."),Object(a.b)("p",null,"This process can be a bit slow, mainly because ",Object(a.b)("inlineCode",{parentName:"p"},"ts-morph")," will scan all your source files\nbased on your ",Object(a.b)("inlineCode",{parentName:"p"},"tsconfig.json"),". You can speed up this process by whitelisting only the folders\nwhere your entities are via ",Object(a.b)("inlineCode",{parentName:"p"},"entitiesDirsTs")," option. "),Object(a.b)("p",null,"After the discovery process ends, all metadata will be cached. By default, ",Object(a.b)("inlineCode",{parentName:"p"},"FileCacheAdapter"),"\nwill be used to store the cache inside ",Object(a.b)("inlineCode",{parentName:"p"},"./temp")," folder to JSON files. "),Object(a.b)("h2",{id:"automatic-invalidation"},"Automatic Invalidation"),Object(a.b)("p",null,"Entity metadata are cached together with modified time of the source file, and every time\nthe cache is requested, it first checks if the cache is not invalid. This way you can forgot\nabout the caching mechanism most of the time."),Object(a.b)("p",null,"One case where you can end up needing to wipe the cache manually is when you work withing a\ngit branch where contents of entities folder differs. "),Object(a.b)("h2",{id:"disabling-metadata-cache"},"Disabling Metadata Cache"),Object(a.b)("p",null,"You can disable caching via:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"await MikroORM.init({\n  cache: { enabled: false },\n  // ...\n});\n")),Object(a.b)("h2",{id:"pretty-printing"},"Pretty Printing"),Object(a.b)("p",null,"By default, cached metadata will be one line JSON string. You can force pretty printing it:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"await MikroORM.init({\n  cache: { pretty: true },\n  // ...\n});\n")),Object(a.b)("h2",{id:"using-different-temp-folder"},"Using Different temp Folder"),Object(a.b)("p",null,"You can set the temp folder via:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"await MikroORM.init({\n  cache: { options: { cacheDir: '...' } },\n  // ...\n});\n")),Object(a.b)("h2",{id:"providing-custom-cache-adapter"},"Providing Custom Cache Adapter"),Object(a.b)("p",null,"You can also implement your own cache adapter, for example to store the cache in redis.\nTo do so, just implement simple ",Object(a.b)("inlineCode",{parentName:"p"},"CacheAdapter")," interface:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"export interface CacheAdapter {\n\n  get(name: string): any;\n\n  set(name: string, data: any, origin: string): void;\n\n}\n")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"export class RedisCacheAdapter implements CacheAdapter { ... }\n")),Object(a.b)("p",null,"And provide the implementation in ",Object(a.b)("inlineCode",{parentName:"p"},"cache.adapter")," option:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"await MikroORM.init({\n  cache: { adapter: RedisCacheAdapter, options: { ... } },\n  // ...\n});\n")))}l.isMDXComponent=!0},288:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a),r=i.a.createContext({}),c=function(e){var t=i.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},o=function(e){var t=c(e.components);return i.a.createElement(r.Provider,{value:t},e.children)};var p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),s=c(n),d=a,u=s[o+"."+d]||s[d]||l[d]||r;return n?i.a.createElement(u,Object.assign({},{ref:t},p,{components:n})):i.a.createElement(u,Object.assign({},{ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=s;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,c[1]=o;for(var d=2;d<r;d++)c[d]=n[d];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);