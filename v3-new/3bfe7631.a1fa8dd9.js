(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{171:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return c}));t(52),t(25),t(20),t(21),t(53),t(0);var a=t(288);function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var r={title:"Upgrading from v2 to v3"},o=[{value:"Default value of autoFlush has changed to false",id:"default-value-of-autoflush-has-changed-to-false",children:[]},{value:"Reworked entity definition",id:"reworked-entity-definition",children:[]},{value:"Integrated Knex.js as query builder and runner",id:"integrated-knexjs-as-query-builder-and-runner",children:[]},{value:"ManyToMany now uses composite primary key",id:"manytomany-now-uses-composite-primary-key",children:[]},{value:"Strict FilterQuery and smart query conditions",id:"strict-filterquery-and-smart-query-conditions",children:[]},{value:"Logging configuration",id:"logging-configuration",children:[]},{value:"Removed deprecated fk option from 1:m and m:1 decorators",id:"removed-deprecated-fk-option-from-1m-and-m1-decorators",children:[]},{value:"SchemaGenerator.generate() is now async",id:"schemageneratorgenerate-is-now-async",children:[]},{value:"New method on NamingStrategy interface",id:"new-method-on-namingstrategy-interface",children:[]},{value:"TypescriptMetadataProvider has been renamed",id:"typescriptmetadataprovider-has-been-renamed",children:[]},{value:"Updated mongodb driver",id:"updated-mongodb-driver",children:[]},{value:"EntityManager.find() now requires where parameter",id:"entitymanagerfind-now-requires-where-parameter",children:[]}],l={rightToc:o},d="wrapper";function c(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(a.b)(d,i({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Following sections describe (hopefully) all breaking changes, most of them might be not valid\nfor you, like if you do not use custom ",Object(a.b)("inlineCode",{parentName:"p"},"NamingStrategy")," implementation, you do not care about\nthe interface being changed."),Object(a.b)("h2",{id:"default-value-of-autoflush-has-changed-to-false"},"Default value of autoFlush has changed to false"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"If you had ",Object(a.b)("inlineCode",{parentName:"p"},"autoFlush: false")," in your ORM configuration before, you can now remove\nthis line, no changes are needed in your app. ")),Object(a.b)("p",null,"Default value for ",Object(a.b)("inlineCode",{parentName:"p"},"autoFlush")," is now ",Object(a.b)("inlineCode",{parentName:"p"},"false"),". That means you need to call\n",Object(a.b)("inlineCode",{parentName:"p"},"em.flush()")," yourself to persist changes into database. You can still change this via ORM's\noptions to ease the transition but generally it is not recommended as it can cause unwanted\nsmall transactions being created around each ",Object(a.b)("inlineCode",{parentName:"p"},"persist"),". "),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"orm.em.persist(new Entity()); // no auto-flushing by default\nawait orm.em.flush();\nawait orm.em.persist(new Entity(), true); // you can still use second parameter to auto-flush\n")),Object(a.b)("h2",{id:"reworked-entity-definition"},"Reworked entity definition"),Object(a.b)("p",null,"Now it is no longer needed to merge entities with ",Object(a.b)("inlineCode",{parentName:"p"},"IEntity")," interface, that was polluting entity's\ninterface with internal methods. New interfaces ",Object(a.b)("inlineCode",{parentName:"p"},"IdentifiedEntity<T>"),", ",Object(a.b)("inlineCode",{parentName:"p"},"UuidEntity<T>")," and ",Object(a.b)("inlineCode",{parentName:"p"},"MongoEntity<T>"),"\nare introduced, that should be implemented by entities. They are not adding any new properties or methods,\nkeeping the entity's interface clean."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"IEntity")," interface has been renamed to ",Object(a.b)("inlineCode",{parentName:"p"},"AnyEntity<T, PK>")," and it no longer has public methods\nlike ",Object(a.b)("inlineCode",{parentName:"p"},"toJSON()"),", ",Object(a.b)("inlineCode",{parentName:"p"},"toObject()")," or ",Object(a.b)("inlineCode",{parentName:"p"},"init()"),". One can use ",Object(a.b)("inlineCode",{parentName:"p"},"wrap()")," method provided by ORM that\nwill enhance property type when needed with those methods (",Object(a.b)("inlineCode",{parentName:"p"},"await wrap(book.author).init()"),").\nTo keep all methods available on the entity, you can still use interface merging with\n",Object(a.b)("inlineCode",{parentName:"p"},"WrappedEntity<T, PK>")," that both extends ",Object(a.b)("inlineCode",{parentName:"p"},"AnyEntity<T, PK>")," and defines all those methods."),Object(a.b)("p",null,"You will need to mark the entity by implementing one of ",Object(a.b)("inlineCode",{parentName:"p"},"*Entity")," interfaces:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"IdEntity<T>")," for numeric/string PK on ",Object(a.b)("inlineCode",{parentName:"li"},"id")," property (",Object(a.b)("inlineCode",{parentName:"li"},"id: number"),")"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"UuidEntity<T>")," for string PK on ",Object(a.b)("inlineCode",{parentName:"li"},"uuid")," property (",Object(a.b)("inlineCode",{parentName:"li"},"uuid: string"),")"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"MongoEntity<T>")," for mongo, where ",Object(a.b)("inlineCode",{parentName:"li"},"id: string")," and ",Object(a.b)("inlineCode",{parentName:"li"},"_id: ObjectId")," are required"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"AnyEntity<T, PK>")," for other possible properties (fill the PK property name to ",Object(a.b)("inlineCode",{parentName:"li"},"PK"),"\nparameter, e.g.: ",Object(a.b)("inlineCode",{parentName:"li"},"AnyEntity<Book, 'myPrimaryProperty'>'"),")")),Object(a.b)("p",null,"To keep all public methods that were part of ",Object(a.b)("inlineCode",{parentName:"p"},"IEntity")," interface in v2, you can use\n",Object(a.b)("inlineCode",{parentName:"p"},"WrappedEntity<T, PK>")," via interface merging:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Book { ... }\nexport interface Book extends WrappedEntity<Book, 'id'> { }\n")),Object(a.b)("p",null,"For more examples, take a look at ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/defining-entities"}),"defining entities section"),"."),Object(a.b)("h2",{id:"integrated-knexjs-as-query-builder-and-runner"},"Integrated Knex.js as query builder and runner"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"QueryBuilder")," now internally uses knex to run all queries. As knex already supports connection\npooling, this feature comes without any effort. New configuration for pooling is now available"),Object(a.b)("p",null,"Transactions now require using ",Object(a.b)("inlineCode",{parentName:"p"},"em.transactional()")," method, previous helpers\n",Object(a.b)("inlineCode",{parentName:"p"},"beginTransaction"),"/",Object(a.b)("inlineCode",{parentName:"p"},"commit"),"/",Object(a.b)("inlineCode",{parentName:"p"},"rollback")," are now removed."),Object(a.b)("p",null,"All transaction management has been removed from ",Object(a.b)("inlineCode",{parentName:"p"},"IDatabaseDriver")," interface, now EM handles\nthis, passing the transaction context (carried by EM, and created by ",Object(a.b)("inlineCode",{parentName:"p"},"Connection"),") to all\ndriver methods. New methods on EM exists: ",Object(a.b)("inlineCode",{parentName:"p"},"isInTransaction()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"getTransactionContext()"),"."),Object(a.b)("p",null,"In postgres driver, it used to be required to pass parameters as indexed dollar sign\n($1, $2, ...), while now knex requires the placeholder to be simple question mark (",Object(a.b)("inlineCode",{parentName:"p"},"?"),"),\nlike in other dialects, so this is now unified with other drivers."),Object(a.b)("h2",{id:"manytomany-now-uses-composite-primary-key"},"ManyToMany now uses composite primary key"),Object(a.b)("p",null,"Previously it was required to have autoincrement primary key for m:n pivot tables. Now this\nhas changed. By default, only foreign columns are required and composite key over both of them\nis used as primary key."),Object(a.b)("p",null,"To preserve stable order of collections, you can force previous behaviour by defining the\nm:n property as ",Object(a.b)("inlineCode",{parentName:"p"},"fixedOrder: true"),", which will start ordering by ",Object(a.b)("inlineCode",{parentName:"p"},"id")," column. You can also\noverride the order column name via ",Object(a.b)("inlineCode",{parentName:"p"},"fixedOrderColumn: 'order'"),". "),Object(a.b)("p",null,"You can also specify default ordering via ",Object(a.b)("inlineCode",{parentName:"p"},"orderBy: { ... }")," attribute."),Object(a.b)("h2",{id:"strict-filterquery-and-smart-query-conditions"},"Strict FilterQuery and smart query conditions"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"FilterQuery")," now does not allow using smart query operators. You can either cast your condition\nas any or use object syntax instead (instead of ",Object(a.b)("inlineCode",{parentName:"p"},"{ 'age:gte': 18 }")," use ",Object(a.b)("inlineCode",{parentName:"p"},"{ age: { $gte: 18 } }"),")."),Object(a.b)("h2",{id:"logging-configuration"},"Logging configuration"),Object(a.b)("p",null,"Previously to start logging it was required to provide your custom logger. Logger now defaults\nto ",Object(a.b)("inlineCode",{parentName:"p"},"console.log()"),", and users can specify what namespaces are they interested in via ",Object(a.b)("inlineCode",{parentName:"p"},"debug"),"\noption. ",Object(a.b)("inlineCode",{parentName:"p"},"true"),"/",Object(a.b)("inlineCode",{parentName:"p"},"false")," will enable/disable all namespaces."),Object(a.b)("p",null,"Available logger namespaces: ",Object(a.b)("inlineCode",{parentName:"p"},"'query' | 'query-params' | 'discovery' | 'info'"),"."),Object(a.b)("h2",{id:"removed-deprecated-fk-option-from-1m-and-m1-decorators"},"Removed deprecated fk option from 1:m and m:1 decorators"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},"mappedBy"),"/",Object(a.b)("inlineCode",{parentName:"p"},"inversedBy")," instead."),Object(a.b)("h2",{id:"schemageneratorgenerate-is-now-async"},"SchemaGenerator.generate() is now async"),Object(a.b)("p",null,"If you used ",Object(a.b)("inlineCode",{parentName:"p"},"SchemaGenerator"),", now there is CLI tool you can use instead. Learn more\nin ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/schema-generator"}),"SchemaGenerator docs"),". To setup CLI, take a look at\n",Object(a.b)("a",i({parentName:"p"},{href:"/docs/installation"}),"installation section"),"."),Object(a.b)("h2",{id:"new-method-on-namingstrategy-interface"},"New method on NamingStrategy interface"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"getClassName()")," is used to find entity class name based on its file name. Now users can\noverride the default implementation to accommodate their specific needs."),Object(a.b)("p",null,"If you used custom naming strategy, you will either need to implement this method yourself,\nor extend ",Object(a.b)("inlineCode",{parentName:"p"},"AbstractNamingStrategy"),"."),Object(a.b)("h2",{id:"typescriptmetadataprovider-has-been-renamed"},"TypescriptMetadataProvider has been renamed"),Object(a.b)("p",null,"The name is now ",Object(a.b)("inlineCode",{parentName:"p"},"TsMorphMetadataProvider"),", there is also newly added ",Object(a.b)("inlineCode",{parentName:"p"},"ReflectMetadataProvider"),"\nthat uses ",Object(a.b)("inlineCode",{parentName:"p"},"reflect-metadata")," instead. As ",Object(a.b)("inlineCode",{parentName:"p"},"TypescriptMetadataProvider")," was the default, no\nchanges should be required. "),Object(a.b)("h2",{id:"updated-mongodb-driver"},"Updated mongodb driver"),Object(a.b)("p",null,"MongoDB driver version 3.3.4 or higher is now required."),Object(a.b)("h2",{id:"entitymanagerfind-now-requires-where-parameter"},"EntityManager.find() now requires where parameter"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"EntityManager")," has now same ",Object(a.b)("inlineCode",{parentName:"p"},"find")," method interface aligned with ",Object(a.b)("inlineCode",{parentName:"p"},"EntityRepository"),",\n",Object(a.b)("inlineCode",{parentName:"p"},"where")," parameter is now required. To select all entities, use ",Object(a.b)("inlineCode",{parentName:"p"},"em.find(Entity, {})"),"\nas value."))}c.isMDXComponent=!0},288:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return p}));var a=t(0),i=t.n(a),r=i.a.createContext({}),o=function(e){var n=i.a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=o(e.components);return i.a.createElement(r.Provider,{value:n},e.children)};var d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},s=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),s=o(t),p=a,b=s[l+"."+p]||s[p]||c[p]||r;return t?i.a.createElement(b,Object.assign({},{ref:n},d,{components:t})):i.a.createElement(b,Object.assign({},{ref:n},d))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=s;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);