(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{180:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));t(52),t(25),t(20),t(21),t(53),t(0);var a=t(288);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var o={title:"Schema Generator"},c=[],i={rightToc:c},p="wrapper";function u(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(p,r({},i,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To generate schema from your entity metadata, you can use ",Object(a.b)("inlineCode",{parentName:"p"},"SchemaGenerator")," helper. "),Object(a.b)("p",null,"You can use it via CLI: "),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"npx mikro-orm schema:create --dump   # Dumps create schema SQL\nnpx mikro-orm schema:update --dump   # Dumps update schema SQL\nnpx mikro-orm schema:drop --dump     # Dumps drop schema SQL\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"You can also use ",Object(a.b)("inlineCode",{parentName:"p"},"--run")," flag to fire all queries, but be careful as it might break your\ndatabase. Be sure to always check the generated SQL first before executing. Do not use\n",Object(a.b)("inlineCode",{parentName:"p"},"--run")," flag in production! ")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"schema:create")," will automatically create the database if it does not exist. "),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"schema:drop")," will by default drop all database tables. You can use ",Object(a.b)("inlineCode",{parentName:"p"},"--drop-db")," flag to drop\nthe whole database instead. "),Object(a.b)("p",null,"Or you can create simple script where you initialize MikroORM like this:"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"./create-schema.ts"))),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-typescript"}),"import { MikroORM } from 'mikro-orm';\n\n(async () => {\n  const orm = await MikroORM.init({\n    entities: [Author, Book, ...],\n    dbName: 'your-db-name',\n    // ...\n  });\n  const generator = orm.getSchemaGenerator();\n\n  const dropDump = await generator.getDropSchemaSQL();\n  console.log(dropDump);\n\n  const createDump = await generator.getCreateSchemaSQL();\n  console.log(createDump);\n\n  const updateDump = await generator.getUpdateSchemaSQL();\n  console.log(updateDump);\n\n  // there is also `generate()` method that returns drop + create queries\n  const dropAndCreateDump = await generator.generate();\n  console.log(dropAndCreateDump);\n\n  // or you can run those queries directly, but be sure to check them first!\n  await generator.dropSchema();\n  await generator.createSchema();\n  await generator.updateSchema();\n\n  await orm.close(true);\n})();\n")),Object(a.b)("p",null,"Then run this script via ",Object(a.b)("inlineCode",{parentName:"p"},"ts-node")," (or compile it to plain JS and use ",Object(a.b)("inlineCode",{parentName:"p"},"node"),"):"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"$ ts-node create-schema\n")))}u.isMDXComponent=!0},288:function(e,n,t){"use strict";t.d(n,"a",(function(){return i})),t.d(n,"b",(function(){return s}));var a=t(0),r=t.n(a),o=r.a.createContext({}),c=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},i=function(e){var n=c(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},l=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),l=c(t),s=a,m=l[i+"."+s]||l[s]||u[s]||o;return t?r.a.createElement(m,Object.assign({},{ref:n},p,{components:t})):r.a.createElement(m,Object.assign({},{ref:n},p))}));function s(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=l;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:a,c[1]=i;for(var s=2;s<o;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}l.displayName="MDXCreateElement"}}]);