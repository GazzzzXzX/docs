(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{212:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));t(52),t(25),t(20),t(21),t(53),t(0);var r=t(288);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var o={title:"Read Replica Connections"},c=[],i={rightToc:c},s="wrapper";function u(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(s,a({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Users can specify multiple read connections via ",Object(r.b)("inlineCode",{parentName:"p"},"replicas")," option. You can provide only fields\nthat differ from master connection, rest will be taken from it."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"const orm = await MikroORM.init({\n  entities: [Author, ...],\n  dbName: `my_database`,\n  type: 'mysql',\n  user: 'master_user',\n  host: 'master_host',\n  replicas: [\n    { name: 'read-1', host: 'read_host_1', user: 'read_user' },\n    { name: 'read-2', host: 'read_host_2' }, // user omitted, will be taken from master connection\n  ],\n});\n")),Object(r.b)("p",null,"By default select queries will use random read connection if not inside transaction. You can\nspecify connection type manually in ",Object(r.b)("inlineCode",{parentName:"p"},"em.getConnection(type: 'read' | 'write')"),"."),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"const connection = orm.em.getConnection(); // write connection\nconst readConnection = orm.em.getConnection('read'); // random read connection\n\nconst qb1 = orm.em.createQueryBuilder(Author);\nconst res1 = await qb1.select('*').execute(); // random read connection\n\nconst qb2 = orm.em.createQueryBuilder(Author, 'a', 'write');\nconst res2 = await qb2.select('*').execute(); // write connection\n\nconst qb3 = orm.em.createQueryBuilder(Author);\nconst res3 = await qb3.update(...).where(...).execute(); // write connection\n\n// all queries inside a transaction will use write connection\nawait orm.em.transactional(async em => {\n  const a = await em.findOne(Author, 1); // write connection\n  a.name = 'test'; // will trigger update on write connection once flushed\n});\n")))}u.isMDXComponent=!0},288:function(e,n,t){"use strict";t.d(n,"a",(function(){return i})),t.d(n,"b",(function(){return p}));var r=t(0),a=t.n(r),o=a.a.createContext({}),c=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},i=function(e){var n=c(e.components);return a.a.createElement(o.Provider,{value:n},e.children)};var s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},l=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),l=c(t),p=r,m=l[i+"."+p]||l[p]||u[p]||o;return t?a.a.createElement(m,Object.assign({},{ref:n},s,{components:t})):a.a.createElement(m,Object.assign({},{ref:n},s))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=l;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[s]="string"==typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=t[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}l.displayName="MDXCreateElement"}}]);